package com.example.ramki.listy.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.ramki.listy.model.TodoEntries;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TODO_ENTRIES.
*/
public class TodoEntriesDao extends AbstractDao<TodoEntries, Long> {

    public static final String TABLENAME = "TODO_ENTRIES";

    /**
     * Properties of entity TodoEntries.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Notes = new Property(2, String.class, "notes", false, "NOTES");
        public final static Property Deleted = new Property(3, Boolean.class, "deleted", false, "DELETED");
        public final static Property Created_on = new Property(4, java.util.Date.class, "created_on", false, "CREATED_ON");
        public final static Property Due = new Property(5, java.util.Date.class, "due", false, "DUE");
    };


    public TodoEntriesDao(DaoConfig config) {
        super(config);
    }
    
    public TodoEntriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TODO_ENTRIES' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'NOTES' TEXT," + // 2: notes
                "'DELETED' INTEGER," + // 3: deleted
                "'CREATED_ON' INTEGER," + // 4: created_on
                "'DUE' INTEGER);"); // 5: due
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TODO_ENTRIES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TodoEntries entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(3, notes);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(4, deleted ? 1l: 0l);
        }
 
        java.util.Date created_on = entity.getCreated_on();
        if (created_on != null) {
            stmt.bindLong(5, created_on.getTime());
        }
 
        java.util.Date due = entity.getDue();
        if (due != null) {
            stmt.bindLong(6, due.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TodoEntries readEntity(Cursor cursor, int offset) {
        TodoEntries entity = new TodoEntries( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // notes
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // deleted
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // created_on
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // due
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TodoEntries entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNotes(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeleted(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setCreated_on(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDue(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TodoEntries entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TodoEntries entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
